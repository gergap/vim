snippet hello "hello world demo" b
#include <stdio.h>

int main(int argc, char *argv[])
{
    printf("Hello ${1:World}!\n");
    return 0;
}
endsnippet

snippet realloc "realloc memory" b
void *${3:tmp} = realloc(${1:data}, ${2:size});
if ($3) {
    /* realloc succeeded, assign new pointer */
    $1 = $3;
} else {
    ${0:/* handle error */}
}
endsnippet

snippet getopt "getopt example structure" b
int opt;
int flags;
while ((opt = getopt(argc, argv, "nt:")) != -1) {
    switch (opt) {
    case 'n':
        flags = 1;
        break;
    case 't':
        nsecs = atoi(optarg);
        break;
    default: /* '?' */
        fprintf(stderr, "Usage: %s [-t nsecs] [-n] name\n", argv[0]);
        exit(EXIT_FAILURE);
    }
}
endsnippet

snippet gpl "GPL License Header" b
/*
 *  Copyright (C) 2014 Gerhard Gappmeier <gappy1502@gmx.net>
 *
 *  This file is part of ${1:programname}.
 *
 *  $1 is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  $1 is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with $1. If not, see <http://www.gnu.org/licenses/>.
 */
endsnippet

snippet encoderdef "Encoder Definitions"
#ifndef _UAENCODER_${1/.*/\U$0\E/g}_H_
#define _UAENCODER_${1/.*/\U$0\E/g}_H_

#include <stdint.h>

/* forward declarations */
struct ua_encoder_context;
struct ua_decoder_context;
struct ua_buffer;
struct ua_${1:typename};

int ua_encode_$1(struct ua_encoder_context *ctx, const struct ua_$1 *val);
int ua_decode_$1(struct ua_decoder_context *ctx, struct ua_$1 *val);
$0
#endif /* _UAENCODER_${1/.*/\U$0\E/g}_H_ */
endsnippet

snippet encoderimpl "Encoder Implementation"
#include "$1.h"
#include "encoder.h"
#include <uabase/memory.h>
#include <uabase/$1.h>
#include <uabase/buffer.h>
#include <stddef.h>

/**
 * Encodes the given ${1:typename} \c val in little endian format.
 * @param ctx the encoder context containing the buffers where serialized network data will be stored.
 * @param val the $1 to encode
 * @return Zero on success, -1 on error.
 */
int ua_encode_$1(struct ua_encoder_context *ctx, const struct ua_$1 *val)
{
    int ret = 0;

    return ret;
}

/**
 * Decodes a $1 into \c val.
 * @param ctx the decoder context containing the buffers with serialized network data.
 * @param val the $1 where the decoder result will be stored.
 * @return Zero on success, -1 on error.
 */
int ua_decode_$1(struct ua_decoder_context *ctx, struct ua_$1 *val)
{
    int ret = 0;

    return 0;
}
endsnippet

snippet uatypedef "UA datatype definition header file" !b
#ifndef _UABASE_${1/.*/\U$0\E/g}_H_
#define _UABASE_${1/.*/\U$0\E/g}_H_

#include <platform/platform.h>

struct ua_${1:typename} {
    $0
};

UA_BEGIN_EXTERN_C

void ua_$1_init(struct ua_$1 *${2:t});
void ua_$1_clear(struct ua_$1 *$2);

int ua_$1_compare(const struct ua_$1 *a, const struct ua_$1 *b);
int ua_$1_copy(const struct ua_$1 *dst, const struct ua_$1 *src);

UA_END_EXTERN_C

#endif /* _UABASE_${1/.*/\U$0\E/g}_H_ */
endsnippet

snippet uatypeimpl "UA datatype definition implementation" !b
#include "$1.h"
#include <platform/memory.h>

void ua_${1:typename}_init(struct ua_$1 *${2:t})
{
    ua_memset($2, 0, sizeof(*$2));
}

void ua_$1_clear(struct ua_$1 *$2)
{
    ${0:/* TODO */}
    ua_memset($2, 0, sizeof(*$2));
}

int ua_$1_compare(const struct ua_$1 *a, const struct ua_$1 *b)
{
    /* TODO */
    return 0;
}

int ua_$1_copy(const struct ua_$1 *dst, const struct ua_$1 *src)
{
    /* TODO */
    return 0;
}

endsnippet

snippet #ifdef "#if ... #endif" b
#ifdef ${1:DEFINE}
${0:${VISUAL}}
#endif /* $1 */
endsnippet

snippet node "Create a UA node" b
${1:tmp} = ua_node_create(g_nsidx, NODECLASS_${2:OBJECT});
if ($1 == UA_NODE_INVALID) goto nodeerror;
ua_nodeid_set_string(&id, (uint16_t)g_nsidx, "${3:Name}");
ua_node_set_nodeid($1, &id);
ua_node_set_browsename($1, "$3");
ua_node_set_displayname($1, "$3");
ref = ua_reference_add(${4:parent_node}, $1, organizes);
if (ref == UA_REF_INVALID) goto referror;
ua_nodeid_clear(&id);
$0
endsnippet

snippet create "Create Object Instance" b
ua_nodeid_set_numeric(&id, ${1:nsidx}, ${2:1234});
node = ua_object_create_instance(&id, type, "${3:BrowseName}", "${4:DisplayName}");
ua_nodeid_clear(&id);
if (node == UA_NODE_INVALID) return -1;
endsnippet

snippet addref "Add Reference" b
ref = ua_reference_add0(${1:src}, ${2:dst}, ${3:UA_ID_ORGANIZES});
endsnippet

snippet pthread "Description"
pthread_create(&thread_id, ${1:&attr}, ${2:thread_routine}, ${3:NULL});
$0
endsnippet

snippet service "Service wrapper"
int uasession_${1:name}(struct ua_requestheader *head, struct ua_$1request *req, struct uasession_msg_ctxt *ctxt)
{
    int ret = UA_EBAD;
    struct uaprovider_$1_ctx *ctx;
    struct ua_$1response *res;
    int32_t i;

    TRACE_DEBUG(TRACE_FAC_SESSION, "%s\n", __func__);

    ctxt->req_head = head;
    ctxt->req_clear = (req_clear_func_t) ua_$1request_clear;
    ctxt->res_clear = (res_clear_func_t) ua_$1response_clear;

    /* check if there is anything to do */
    if (req->num_nodes <= 0) {
        ctxt->res_head->service_result = UA_SCBADNOTHINGTODO;
        goto out1;
    }
    /* check operation limits */
    if (uaserver_check_operation_limit(UASERVER_OPLIMIT_MAX_NODES_PER_READ, req->num_nodes)) {
        ctxt->res_head->service_result = UA_SCBADTOOMANYOPERATIONS;
        goto out1;
    }

    /* check if timestamptoreturn is valid */
    if (req->ts != UA_TIMESTAMPSTORETURN_BOTH &&
        req->ts != UA_TIMESTAMPSTORETURN_SERVER &&
        req->ts != UA_TIMESTAMPSTORETURN_SOURCE &&
        req->ts != UA_TIMESTAMPSTORETURN_NEITHER) {
        ctxt->res_head->service_result = UA_SCBADTIMESTAMPSTORETURNINVALID;
        goto out1;
    }

    /* check if max age is valid */
    if (req->max_age < 0) {
        ctxt->res_head->service_result = UA_SCBADMAXAGEINVALID;
        goto out1;
    }

    /* create $1 response */
    ctxt->res = res = IPC_ALLOC(res);
    if (res == NULL) {
        ctxt->res_head->service_result = UA_SCBADOUTOFMEMORY;
        goto out1;
    }
    ua_$1response_init(res);

    /* create result array */
    res->results = IPC_ALLOC_ARRAY(res->results, req->num_nodes);
    if (res->results == NULL) {
        IPC_CLEANUP_MEM(ctxt->res);
        ctxt->res_head->service_result = UA_SCBADOUTOFMEMORY;
        goto out1;
    }
    res->num_results = req->num_nodes;
    IPC_MEMSET_ARRAY(res->results, 0, res->num_results);

    /* initialize results with badnodeidunknown in case no provider handles it */
    for (i = 0; i < res->num_results; i++) {
        res->results[i].status = UA_SCBADNODEIDUNKNOWN;
    }

    /* create $1 context */
    ctx = uaprovider_$1_ctx_init(ctxt);
    /* store $1 request */
    ctx->req = req;

    /* call all providers */
    uaprovider_$1(ctx);

    return 0;

out1:
    ua_$1request_clear(req);
    IPC_FREE(req);
    return ret;
}
endsnippet

# Unit test snippets
global !p
def find_and_add_test(name):
    vim.command(':echom "name='+name+'"')
    vim.command(':au cursorhold <buffer> ++once call RegisterTest("'+name+'")')
endglobal

post_jump "if snip.tabstop == 0: find_and_add_test(snip.tabstops[1].current_text)"
snippet test "test function" bA
void test_${1:name}(void)
{
    $0
}
endsnippet

snippet utest "unit test main template" b
#include <testlib.h>

$0

void test_init(void)
{
    ${2:// TODO}
}

void test_cleanup(void)
{
    ${3:// TODO}
}

void register_tests(void)
{
    UREGISTER_NAME("${1:testname}");
    UREGISTER_INIT(test_init);
    UREGISTER_CLEANUP(test_cleanup);
}

UTEST_MAIN()
endsnippet

snippet Inc "system include" bA
#include <${1:stdio}.h>
endsnippet

snippet inc "local include" bA
#include "${1:`!p snip.rv = snip.basename`.h}"
endsnippet
